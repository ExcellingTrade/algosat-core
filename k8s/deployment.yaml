# Kubernetes namespace for Algosat
apiVersion: v1
kind: Namespace
metadata:
  name: algosat
  labels:
    name: algosat

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: algosat-config
  namespace: algosat
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  REDIS_URL: "redis://redis-service:6379/0"
  DATABASE_URL: "postgresql+asyncpg://algosat:$(POSTGRES_PASSWORD)@postgres-service:5432/algosat"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: algosat-secrets
  namespace: algosat
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  POSTGRES_PASSWORD: YWxnb3NhdF9wcm9k  # algosat_prod
  SECRET_KEY: eW91cl9zdXBlcl9zZWNyZXRfa2V5X2hlcmU=  # your_super_secret_key_here
  ENCRYPTION_KEY: eW91cl9lbmNyeXB0aW9uX2tleV9oZXJl  # your_encryption_key_here

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: algosat
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: algosat
        - name: POSTGRES_USER
          value: algosat
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: algosat-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - algosat
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - algosat
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: algosat
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: algosat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - "allkeys-lru"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: algosat
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Algosat Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: algosat-app
  namespace: algosat
spec:
  replicas: 3
  selector:
    matchLabels:
      app: algosat-app
  template:
    metadata:
      labels:
        app: algosat-app
    spec:
      containers:
      - name: algosat
        image: algosat:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: algosat-config
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: algosat-secrets
              key: POSTGRES_PASSWORD
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: algosat-secrets
              key: SECRET_KEY
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: algosat-secrets
              key: ENCRYPTION_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30

---
# Algosat Application Service
apiVersion: v1
kind: Service
metadata:
  name: algosat-service
  namespace: algosat
spec:
  selector:
    app: algosat-app
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: algosat-ingress
  namespace: algosat
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "200"
spec:
  tls:
  - hosts:
    - api.algosat.com
    secretName: algosat-tls
  rules:
  - host: api.algosat.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: algosat-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: algosat-hpa
  namespace: algosat
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: algosat-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: algosat-pdb
  namespace: algosat
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: algosat-app
